<?xml version="1.0" encoding="UTF-8"?>
<project name="composer" basedir="." default="update" xmlns:mleko.composer="composer.ant.mleko">
	<property name="properties.composer" value="${basedir}/composer.ant.properties"/>

	<!-- Load properties from file -->
	<condition property="composer.properties.available" value="true">
		<available file="${properties.composer}"/>
	</condition>
	<target name="load-properties" if="composer.properties.available">
		<echo>Load properties from file ${properties.composer}</echo>
		<property file="${properties.composer}" relative="true"/>
	</target>

	<!-- Init default properties -->
	<target name="init" depends="load-properties">
		<property name="config.composer.self-update" value="true"/>
		<property name="config.composer.self-update.age" value="604800"/>

		<property name="config.composer.project.dir" value="${basedir}" relative="true"/>

		<property name="config.composer.phar" location="${basedir}/composer.phar" relative="true"/>
	</target>

	<!-- Dump config to log and file -->
	<target name="dump-properties" depends="init" description="Init properties and dump them to file">
		<echo>Dump composer properties to file ${properties.composer}</echo>

		<local name="composer.properties.dir"/>
		<dirname property="composer.properties.dir" file="${properties.composer}"/>
		<mkdir dir="${composer.properties.dir}"/>

		<echoproperties prefix="config.composer."/>
		<echoproperties destfile="${properties.composer}" prefix="config.composer."/>
	</target>

	<!-- Check if composer already exists -->
	<target name="exists" depends="init">
		<available property="composer.exists" file="${config.composer.phar}"/>
	</target>

	<!-- Check composer age -->
	<target name="check-age" depends="init" if="config.composer.self-update.age">
		<mleko.composer:isNewerThan file="${config.composer.phar}" age="${config.composer.self-update.age}" property="composer.phar.upToDate"/>
	</target>

	<!-- Self-update composer -->
	<target name="self-update" if="${config.composer.self-update}" unless="composer.phar.upToDate" description="Self-update Composer" depends="init, check-age">
		<mleko.composer:command>self-update</mleko.composer:command>
	</target>

	<!-- Create dir and install composer -->
	<target name="self-install" unless="composer.exists" depends='init, exists' description="Fetch Composer if it doesn't exist">
		<echo message="Installing composer" level="verbose"/>

		<local name="composer.phar.dir"/>
		<dirname property="composer.phar.dir" file="${config.composer.phar}"/>
		<mkdir dir="${composer.phar.dir}"/>

		<get src="https://getcomposer.org/composer.phar" dest="${config.composer.phar}" skipexisting="true"/>
		<chmod file="${config.composer.phar}" perm="0755"/>
		<echo message="composer installed" level="verbose"/>
	</target>

	<!-- Install dependencies -->
	<target name="install" depends="init, self-install, self-update" description="Install project dependencies">
		<mleko.composer:command options="--optimize-autoloader">install</mleko.composer:command>
	</target>
	
	<target name="update" depends="init, self-install, self-update" description="Install/update project dependencies">
		<!-- Check for composer.lock file. If exists run update, install in other case -->
		<local name="composer.command"/>
		<condition property="composer.command" value="update" else="install">
			<available file="${config.composer.project.dir}/composer.lock"/>
		</condition>
		<mleko.composer:command options="--optimize-autoloader">${composer.command}</mleko.composer:command>
	</target>

	<!-- Macro simplifying use of composer -->
	<macrodef name="command" uri="composer.ant.mleko">
		<text name="command"/>
		<attribute name="options" default=""/>
		<sequential>
			<local name="opts"/>
			<property name="opts" value="--no-interaction @{options}"/>
			<echo message="Run composer @{command}" level="verbose"/>
			<exec executable="${config.composer.phar}">
				<arg line="${opts}"/>
				<arg value="@{command}"/>
			</exec>
			<echo message="composer @{command} ended" level="verbose"/>
		</sequential>
	</macrodef>

	<!-- Check if specified file is newer than age in seconds -->
	<scriptdef name="isNewerThan" uri="composer.ant.mleko" language="javascript">
		<attribute name="file"/> <!-- The file to check. -->
		<attribute name="age"/> <!-- The threshold of file age in seconds. -->
		<attribute name="property"/> <!-- The name of property to set. -->
		<attribute name="value"/> <!-- The value to set the property to. Defaults to "true". -->
		<attribute name="else"/> <!-- The value to set the property to if the condition evaluates to false. By default the property will remain unset. -->
		<![CDATA[
			var fileName = attributes.get("file");
			var age = attributes.get("age");
			var property = attributes.get("property");
			var value = attributes.get("value");
			var elseValue = attributes.get("else");
			
			var maxAge = parseInt(age, 10);
			
			if(null === fileName)self.fail("`file` is required");
			if(null === age || isNaN(maxAge))self.fail("`age` is required and must be valid int string");
			if(null === property)self.fail("`property` is required");
			if(null === value)value="true";
				
			var file = new java.io.File(fileName);
			var ageInSeconds = (Date.now() - file.lastModified())/1000;
			
			if(ageInSeconds < maxAge){
				project.setProperty(property, value);
			}else if(null !== elseValue){
				project.setProperty(property, elseValue);
			}
		]]>
	</scriptdef>
	
	<!-- Basic composer self-install + install to preload composer. Copy to mail build script -->
	<target name="composer-init">
		<get src="https://getcomposer.org/composer.phar" dest="${basedir}/composer.phar" skipexisting="true"/>
		<chmod file="${basedir}/composer.phar" perm="0755"/>
		<exec executable="${basedir}/composer.phar">
			<arg line="install"/>
		</exec>
	</target>

</project>